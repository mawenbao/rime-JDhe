patch:
  switches:
    - name: ascii_mode
      reset: 0
      states: [ En, 中 ]
    - name: full_shape
      states: [ 半, 全 ]  # 符号
    - name: ascii_punct
      states: [ 。，, ．， ] # 中文标点，英文标点
    - name: emoji
      states: [ 🤭, 😄 ]
      reset: 1
    - name: simplification
      states: [ 简, 繁 ]
    - name: chaifen
      states: [ 不拆, 扌斥 ]
    - name: inflexible
      reset: 1
      states: [ 动词, 固词 ] # 「固詞」表示「固頂詞」註釋隱藏開關，請直接在此指定 reset
      # 默認情況下，輸入 4 碼時，會禁止碼表輸出（「動詞」模式）。
      # 這是因爲碼表最大碼長爲 4，可能會產生較低頻的多字詞，覆蓋過用戶自造的常用詞語。
      # 當固詞模式啓動後，輸入 4 碼時會優先輸出碼表中的二字詞，這些輸出帶有「⚡️」標記。
    - name: charset_filter               # 自定义字集
      states: [ 全集, 常用 ]
      reset: 1
    - name: prediction                   # 输入候选预测
      states: [ 关闭预测, 开启预测 ]
    - name: pinyinhint                   # 拼音滤镜
      states: [ 🔇, 🔊 ]
    - name: single_char_only_for_full_code  # 四码单字开关
      states: [ 词组, 单字 ]
    - name: embeded_cands   # 字词嵌入编辑栏
      states: [普通, 嵌入]
    - name: block_words_enabled   # 是否屏蔽指定的字词列表
      states: [ 正常, 屏蔽 ]
    - name: unicode_comment   # Unicode 区位提示
      states: [ U关, U开 ]

  set_fuzhu_type: # 直接辅助就是nire/=你，间接辅助就是ni/re=你，区别在于间接辅助不使用/引导的时候就和普通双拼没区别
    __include: patch/自定义直接辅助           # 可选的有：直接辅助、间接辅助

  # 辅助码双拼运算
  自定义直接辅助:
    __append:
      #以下是双拼运算
      - derive/^(.+);.*$/$1/ # 纯双拼的情况
      #分号后面第一组辅助码
      - derive/^(.+);(\w)(\w).*$/$1$2/ # 双拼+一位辅助码的情况
      - abbrev/^(.+);(\w)(\w).*$/$1$2$3/ # 双拼+2位辅助码的情况，abbrev类型不可以整句内输入2位辅助码，必须加/
      - derive|^(.+);(\w)(\w).*$|$1$2$3/| # 整句模式下，输入syff/ 出单字 增强单字性能
      - derive|^(.+);(\w)(\w).*$|$1$2$3o| # 整句模式下，输入syffo 出单字 增强单字性能
      #分号后面第二组辅助码
      - derive/^(.+);.*?,(\w)(\w).*$/$1$2/
      - abbrev/^(.+);.*?,(\w)(\w).*$/$1$2$3/
      - derive|^(.+);.*?,(\w)(\w).*$|$1$2$3/|
      - derive|^(.+);.*?,(\w)(\w).*$|$1$2$3o|
      #分号后面第三组辅助码
      - derive/^(.+);.*?,.*?,(\w)(\w).*$/$1$2/
      - abbrev/^(.+);.*?,.*?,(\w)(\w).*$/$1$2$3/
      - derive|^(.+);.*?,.*?,(\w)(\w).*$|$1$2$3/|
      - derive|^(.+);.*?,.*?,(\w)(\w).*$|$1$2$3o|
      #分号后面第四组辅助码
      - derive/^(.+);.*?,.*?,.*?,(\w)(\w).*$/$1$2/ 
      - abbrev/^(.+);.*?,.*?,.*?,(\w)(\w).*$/$1$2$3/
      - derive|^(.+);.*?,.*?,.*?,(\w)(\w).*$|$1$2$3/|
      - derive|^(.+);.*?,.*?,.*?,(\w)(\w).*$|$1$2$3o|
      - erase/^(.+);(.+)$/              # 刪除原始編碼以加速檢索

  自定义间接辅助:  ########################################位于词库第三个分号后
    __append:
    #以下是双拼运算
    - derive/^(.+);.*$/$1/ # 纯双拼的情况
    #分号后面第一组辅助码
    - derive|^(.*?);(\w).*$|$1/$3| # 双拼+一位辅助码的情况
    - derive|^(.*?);(\w)(\w).*$|$1/$3$4| # 双拼+2位辅助码的情
    #分号后面第二组辅助码
    - derive|^(.*?);.*?,(\w).*$|$1/$3| # 双拼+一位辅助码的情况
    - derive|^(.*?);.*?,(\w)(\w).*$|$1/$3$4| # 双拼+2位辅助码的情况
    #分号后面第三组辅助码
    - derive|^(.*?);.*?,.*?,(\w).*$|$1/$3| # 双拼+一位辅助码的情况
    - derive|^(.*?);.*?,.*?,(\w)(\w).*$|$1/$3$4| # 双拼+2位辅助码的情况
    #分号后面第四组辅助码
    - derive|^(.*?);.*?,.*?,.*?,(\w).*$|$1/$3| # 双拼+一位辅助码的情况
    - derive|^(.*?);.*?,.*?,.*?,(\w)(\w).*$|$1/$3$4| # 双拼+2位辅助码的情况
    - erase/^(.+);(.+)$/    # 删除原始编码加速检索

  key_binder/+:
    __include: keys.custom:/keys_config

  punctuator/+:
    symbols/+:
      __include: symbols.custom:/symbols
    full_shape/+:
    half_shape/+:
  
  # 取消简单鹤前置候选^
  fixed:
    dictionary: ""
    #dictionary: JDhe                            # 挂载词库
    #enable_encoder:  false                  # 是否启用 自动造词
    #enable_sentence:  false                 # 是否启用造句模式
    #encode_commit_history: true     # 是否对已上屛词自动成词
    #enable_completion: false              # 编码提示开关（提前显示尚未输入完整码的字）
    #enable_user_dict: false                 # 是否启用用户词典（记录动态字词频、自造词）
    #initial_quality: 0.1                           # 初始权重应比其他高