patch:
  __include: config_base:/patch

 # 语言模型
  grammar/language: zh-hans-t-essay-bgw
  grammar/collocation_max_length: 4  # 最大搭配长度
  grammar/collocation_min_length: 3  #  最小搭配长度

  schema/name: 简单鹤
  schema/icon: ico/双.ico           # string 方案图标，格式： .ico
  schema/dependencies/+: 
    - wanxiang_pinyin_dz   # 万象拼音单字反查
    - melt_eng # 英文
    - tiger  # 虎码
    - JDhe  # 简单鹤 

  switches/+:   
    - name: ascii_mode
      reset: 0
      states: [ 中, En ]   
    - name: full_shape
      states: [ 半, 全 ]  # 符号
    - name: ascii_punct
      states: [ 。，, ．， ] # 中文标点，英文标点 
    - name: inflexible
      reset: 1    
#      states: [ 动词, 固词 ] # 「固詞」表示「固頂詞」註釋隱藏開關，請直接在此指定 reset
      # 默認情況下，輸入 4 碼時，會禁止碼表輸出（「動詞」模式）。
      # 這是因爲碼表最大碼長爲 4，可能會產生較低頻的多字詞，覆蓋過用戶自造的常用詞語。
      # 當固詞模式啓動後，輸入 4 碼時會優先輸出碼表中的二字詞，這些輸出帶有「⚡️」標記。
    - name: chaifen
#      reset: 0
      states: [ 不拆, 扌斥 ]


  # 四码单字过滤开关 默认词组
#  switches/@08/reset: 0


##################################################

# [style]
# 字体；候选项、候选窗口的行为、布局及样式
  style/horizontal: true # 候选词 true 为横排，竖排为 false
#  style/inline_preedit: false   # 行内显示预编辑区：true；false
  style/candidate_list_layout: linear        # macOS 候选项排列方向 stacked(竖排) | linear  
  style/layout/shadow_radius: 10                       # 阴影区域半径，为 0 不显示阴影；需要同时在配色方案中指定非透明的阴影颜色
  style/color_scheme: minimalism_white      # 浅色模式下，配色方案
  style/color_scheme_dark: minimalism_white                # 深色模式下，Weasel 的配色方案，Windows 10 1809+ 可用
#  style/layout/margin_x: 4
#  style/layout/margin_y: 4  
#  style/layout/hilite_padding: 4  
#  style/hilited_corner_radius: 0                   # macOS选中框 圆角半径  
  style/layout/max_width: 400                           # 候选框最大宽度，文本竖排模式下如高度超此尺寸则换列显示候选，设置为 0 则不启用此功能 


  # 禁用原方案的翻译器
  'engine/translators/@02': null
  # 翻譯器
  'engine/translators/@after 02': lua_translator@*moran_express_translator@with_reorder 
  # 候选排序
  'engine/filters/@after 00': lua_filter@*moran_reorder_filter
  # 词语级出简让全
  'engine/filters/@after 01': lua_filter@*moran_ijrq_filter
  # 简快码提示
  'engine/filters/@after 02': lua_filter@*moran_hint_filter_v2


# 次翻译器固定词频 （配合自造词使用）
  fixed:
    dictionary: JDhe                            # 挂载词库
    enable_encoder:  false                  # 是否启用 自动造词  
    enable_sentence:  false                 # 是否启用造句模式
    encode_commit_history: true     # 是否对已上屛词自动成词  
    enable_completion: false              # 编码提示开关（提前显示尚未输入完整码的字）
    enable_user_dict: false                 # 是否启用用户词典（记录动态字词频、自造词）
    initial_quality: 10                           # 初始权重应比其他高  

  moran:
    # 簡快碼提示符
    # 修改爲 "" 可取消提示符
    # 建議在熟悉簡碼後再取消
    quick_code_indicator: "⌃"

    # 詞輔功能
    # 當輸入二字或三字詞時，允許詞末輸入 *一位* 輔助碼篩選詞語。
    # 例如輸入 lmjxz 得到「連接」，輸入 lmjxj 得到「鏈接」。
    # 但是與字輔輸入方法不同，詞輔在生效後 *不能* 在句末繼續輸入形成整
    # 句——這個功能僅用於「詞語篩選」。因此，這個功能僅適合習慣於以詞語
    # 爲單位輸入的用戶，因此默認是關閉的。
    #
    # 開啓後，詞輔篩選的詞語會帶有輔助碼提示，例如「鏈接」後會有「jf」，
    # 意思是輸入 j *或* f 都可以定位到這個詞，而不是說要同時輸入 jf 兩個碼
    # （相反，同時輸入 jf 兩碼後反而無法得到該選項）。
    enable_word_filter: true
    # 重設詞輔匹配提示符爲其他字符串。
    # 即輸入 lmjxz 時被詞輔匹配的候選「連接」的提示符，不影響輔助碼提示功能的輸出。
    # 設爲 "" 完全取消提示。
    # 設爲 {} 表示不重設詞輔提示符。
    word_filter_match_indicator: ""

    # 「出簡讓全」相關設置
    # 當一個字具有簡碼時，打其全碼（不論是 yyxx 還是 yyxxo）都會導致該
    # 字讓出首位，而被推遲到後位。
    ijrq:
      enable: true       # 是否啓用單字的出簡讓全？
      #defer: 5          # 延遲多少位？若不設置该项，或值小於等於 0，則推遲到第二頁的首選
      show_hint: true    # 若讓全，則提示簡碼打法

      # 詞語級「讓全」，對二、三、四字詞有效
      # 例：假設 lmjx 的輸出是 1.連接 2.鏈接
      # 想要「鏈接」時，增加 f ，但是由於這兩個候選仍然共享 lmjxf 編碼，因此順序不變。
      # 若開啓詞語級讓全，則 lmjxf 的首選會被調整爲「鏈接」
      enable_word: false

    # 單字或詞輔的輔助碼提示
    # 
    # 單字輔助碼會顯示出所有可能的輔助碼，且不顯示拆分
    # 建議使用 Ctrl+i 切換輔助碼拆分提示功能
    #
    # 詞輔助碼提示僅在開啓 enable_word_filter 時生效
    # 具體提示格式請參考上面「詞輔功能」的說明
    enable_aux_hint: false

    # 簡快碼提示（包括字和詞）
    # 例如 輸入 yy te er 英特爾 會提示「⚡yte」，即使用 yte 可以打出這個詞
    enable_quick_code_hint: true
    quick_code_indicator2: ""    #简码提示图标
    quick_code_indicator3: ""    #分割符提示 默认“ ¦ ”
    quick_code_hint_min_len: 2 # 最小词长默认2，改为1则单字如果有简码也提醒
    quick_code_hint_max_len: 3 # 最小词长默认3


    # 輸入四碼時，如果簡碼碼表中含有對應條目，則放置在第二選項。
    show_chars_anyway: true   # 是否輸出簡碼碼表單字，例：輸入 jwrg 時，次選爲「佳」
    show_words_anyway: true   # 是否輸出簡碼碼表詞語，例：輸入 lmsd 時，次選爲「兩面三刀」

##################################################

  # 自定义短语
  'engine/translators/@after 03': table_translator@custom_phrase    

  # 自定义短语
  custom_phrase:
    dictionary: ""
    user_dict: custom_phrase/custom_phrase_double   # 双拼自定义短语
    db_class: stabledb
    enable_completion: false # 补全提示
    enable_sentence: false   # 禁止造句
    initial_quality: 99      # custom_phrase 的权重应该比 pinyin 和 melt_eng 大

##################################################

  # 英文输入
  'engine/translators/@after 04': table_translator@melt_eng 

  # 次翻译器，英文
  melt_eng:
    dictionary: melt_eng     # 挂载词库 melt_eng.dict.yaml
    enable_sentence: false   # 禁止造句
    enable_user_dict: false  # 禁用用户词典
    initial_quality: 1.1     # 初始权重
    comment_format:          # 自定义提示码
      - xform/.*//           # 清空提示码

##################################################

  # 中英混合词汇
  'engine/translators/@after 05': table_translator@cn_en

  # 中英混合词汇
  cn_en:
    dictionary: ""
    user_dict: en_dicts/cn_en_flypy
    db_class: stabledb
    enable_completion: true
    enable_sentence: false
    initial_quality: 0.5
    comment_format:
      - xform/^.+$//


##################################################

  # 强制删词, 隐藏词组
  'engine/processors/@after 00': lua_processor@*jdh/cold_word_drop*processor
  # 删词, 隐词,降频 (Ctrl+D、Ctrl+X、Ctrl+J)  
  'engine/filters/@after 03': lua_filter@*jdh/cold_word_drop*filter
  # lua 快捷键
  key_binder/drop_cand: "Control+d"            # 强制删词, 无视输入的编码
  key_binder/ehide_cand: "Control+x"            # 匹配当前输入码后隐藏指定的候选字词
  key_binder/reduce_fq_cand: "Control+j"       # 匹配当前输入码后降频指定的候选字词

  # Lua 配置:  Ctrl+J 将词条降频到第 idx 个位置
  cold_word_reduce:                   
    idx: 4

##################################################

  # 自定义置顶词 自造词 快捷键响应
  'engine/processors/@after 01': lua_processor@*moran_pin*pin_processor
  # 自定义置顶词 自造词
  'engine/translators/@after 06': lua_translator@*moran_pin*panacea_translator
  # 替换掉雾凇版本自定义置顶词  （需配置 config_base 里的置顶词配置）
  'engine/filters/@09': lua_filter@*moran_pin*pin_filter

  # Lua 配置:  自定义置顶词 自造词 快捷键响应
    # 输入时通过快捷键 Ctrl+t 可以将高亮显示的候选置顶，被置顶的候选位置固定，不再参与调频
    # 对同一输入码最高支持8个置顶词，当尝试置顶第9个词时，最早被置顶的词将会失效
    # 通过输入 “编码A”//“编码B” 实现造词功能，编码A是这个新词的新编码 编码B是目前可以打出该词的编码
    # 例如 输入 tnfb 不能得到“头脑风暴”这一候选， 此时我们可以输入 tnfb//tbnkfgbk 按下空格 让“头脑风暴”候选上屏，上屏的词会被加入用户词库中，之后我们可以用 tnfb 来得到“头脑风暴”这一候选了
    # 造出的词与置顶词是等同的
  moran/pin/enable: true   #「置顶」功能开关
  moran/pin/indicator: "ᵀᴼᴾ"   # 置顶词提示符
  moran/pin/panacea/prompt: "〔加詞〕" # 加词状态提示
  moran/pin/panacea/infix: "//"               # 加词引导符
    # 自由加词模式开关，开啓此模式后，输入“编码A”//并空格上屏后会进入加词状态，此时可以连续地、不受束缚地输入，再次按下//空格退出加词状态，期间输入的内容将会被记录爲“编码A”的新置顶词
    # 此模式适合造一些混合词，如“A4纸”、“KOS-MOS”等
  moran/pin/panacea/freestyle: false

##################################################

  # 临时虎码反查标识
  'engine/segmentors/@after 02': affix_segmentor@tiger_lookup
  # 虎码反查（O）
  'engine/translators/@after 07': table_translator@tiger_lookup
  # 虎码反查显示编码
  'engine/filters/@after 06': reverse_lookup_filter@tiger_reverse_lookup

  # 虎码反查
  tiger_lookup:
    tag: tiger_lookup
    dictionary: tiger
    enable_encoder:  false                  # 是否启用 自动造词  
    enable_sentence:  false                 # 是否启用造句模式
    enable_user_dict: false
    enable_completion: false              #  编码提示开关（提前显示尚未输入完整码的字）
    prefix: "ohm"
    tips: "〔虎码〕"
    comment_format:
      - "xform/^/ /"

  tiger_reverse_lookup: 
    dictionary: JDhe
    tags: [ tiger_lookup ]


  # 响应 临时虎码反查
  recognizer/patterns/tiger_lookup: "^ohm[a-z]*'?$"  


##################################################

  # 万象拼音反查标识
  'engine/segmentors/@after 03': affix_segmentor@wanxiang_py_lookup
  # 万象拼音反查（`）
  'engine/translators/@after 08': table_translator@wanxiang_py_lookup
  # 万象拼音反查显示编码
  'engine/filters/@after 07': reverse_lookup_filter@wanxiang_py_reverse_lookup

  # 禁用原方案的反查
  reverse_lookup: null     
  recognizer/patterns/reverse_lookup: null

  # 万象拼音反查
  wanxiang_py_lookup:
    tag: wanxiang_py_lookup
    dictionary: wanxiang_pinyin_dz
    enable_encoder:  false                  # 是否启用 自动造词  
    enable_sentence:  false                 # 是否启用造句模式
    enable_user_dict: false
    enable_completion: false              #  编码提示开关（提前显示尚未输入完整码的字）
#    prefix: "`"
    tips: "〔反查〕"
    comment_format:
      - "xform/^/ /"
      - xform/([nl])v/$1ü/

  wanxiang_py_reverse_lookup: 
    dictionary: JDhe
    tags: [ wanxiang_py_lookup ]

  # 响应 临时「`」统配反查
  recognizer/patterns/wanxiang_py_lookup: "(^(`[a-z`]+))|(^([a-z]{2}(`[a-z`]?|[a-z`]`|[a-z][a-z]`)))"  

##################################################

  # 辅助码 （before last 在列表最后一个之前加上）
#  'engine/filters/@before last': lua_filter@*auxCode_filter@jdh_aux_code

 # Lua 配置:  辅助码
  axu_code:
    # 激活码
    trigger_word: "~"
    # 展示辅码的模式
    # always:   总是展示(默认)
    # trigger:  输入激活码后激活辅码
    # none:     始终不展示辅码
    show_aux_notice: "trigger"


##################################################

  'engine/filters/@after 11': simplifier@chaifen

  chaifen:
    option_name: chaifen
    opencc_config: jdh_cf.json
    tips: char        # 转换提示: all 都显示 | char 仅单字显示 | none 不显示。
    tags: [ abc, encode, punct, reverse_lookup ]           # 设置其作用范围
    show_in_comment: true   # 是否仅将转换结果显示在备注中
    comment_format:
#      - "xform/-/ /"
#      - "xform/〕〔/｜/"

  # 五笔画反查显示编码
  radical_reverse_lookup/dictionary: JDhe
  radical_reverse_lookup/comment_format: null

  # 五笔画反查显示编码
  stroke_reverse_lookup/dictionary: JDhe  

##################################################


  # Lua 配置: 自定义字集过滤 （影响范围）
  charset_filter/tags: [ abc, encode, punct, reverse_lookup, mkst, tiger_lookup, wanxiang_py_lookup ] 

  # Lua 配置：Emoji 降频到第 idx 个位置
  emoji_reduce:                      
    idx: 5


  # Lua 配置：农历的触发关键字
  lunar: /nl  # 农历： 二〇二三年冬月二十 癸卯年（兔）冬月二十

    # Lua 配置: 置顶候选项
  # 注释太长了，请参考 pin_cand_filter.lua 开头的说明书。
#  pin_cand_filter:
    # 格式：编码<Tab>字词1<Space>字词2……
#    __patch:
#      - config_pin_cand:/tiger

  # 简繁切换  
  simplification/tips: none   #简繁对照   转换提示: all 都显示 | char 仅单字显示 | none 不显示。



# 拼写设定
# 不直接上屏的标点
  speller/alphabet/: "zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA`;/" 
# table_translator翻译器，支持自动上屏。例如 “zmhu”可以自动上屏“怎么回事”
  speller/auto_select: true
#  speller/auto_select_pattern: ^[a-z]+/|^[a-df-zA-DF-Z]\w{3}|^e\w{4}|^;(\w+|;)
  speller/auto_select_pattern: ^;\w+|^o\w{3}$  
  speller/algebra/: 
    __patch: 
      - set_shuru_schema     #输入解码规则
      - config_pinyin:/fly_kk_kw                              # 飞键 kuai
      - config_pinyin:/fly_yi_ei                              # 飞键 yi
      - config_pinyin:/fly_qx_qo                              # 飞键 qia
      - config_pinyin:/fly_xq_xo                              # 飞键 xiu
      - config_pinyin:/fly_rr_rp                              # 飞键 ruan
      - config_pinyin:/fly_gf_gp                              # 飞键 gen
      - config_pinyin:/fly_jn_ja                              # 飞键 jiao
      - config_pinyin:/fly_po_ps                              # 飞键 po
      - config_pinyin:/fly_fg_fs                              # 飞键 feng
      - config_pinyin:/fly_qq_qh                              # 飞键 qiu
      - config_pinyin:/fly_ww_wk                              # 飞键 wei
      - config_pinyin:/fly_cs_cl                              # 飞键 cong
      - config_pinyin:/fly_zs_zl                              # 飞键 zong
      - config_pinyin:/fly_dc_dl                              # 飞键 dao
      - config_pinyin:/fly_vr_vn                              # 飞键 zhuan
      - config_pinyin:/fly_ce_cn                              # 飞键 ce
      - set_algebra_fuzhu    #辅助码部分


# 主翻译器
  translator/dictionary: luna_pinyin.extended          #引入增补自定词典
  translator/prism: null   # 多方案共用一个词库时，为避免冲突，需要用 prism 指定一个名字。(因此方案为倒反天罡 故为空不指定)
  translator/enable_word_completion: true  # 大于 4 音节的词条自动补全，librime > 1.11.2
  translator/initial_quality: 1.2          # 拼音的权重应该比英文大
  translator/preedit_format:         #不显示转换全拼编码
######################
  translator/enable_completion: true  # 启用候选词补全
  translator/spelling_hints: 3    # 设置多少字以内候选标注完整带调拼音
  translator/contextual_suggestions: true   #上下文建议开启〔需配合 grammar 使用〕
  translator/max_homophones: 7 # 最大同音簇长度〔需配合 grammar 使用〕
  translator/max_homographs: 7 # 最大同形簇长度〔需配合 grammar 使用〕
######################
  translator/disable_user_dict_for_patterns: 
      - "^[a-z;,./]$"           # 禁止单码字调频
      - "^[a-z;,./][a-z;,./]$"  # 禁止双码字调频
#      - "^[a-z;,./][a-z;,./][a-z;,./][a-z;,./]$"  # 禁止四码词调频
  translator/preedit_format: # preedit_format 影响到输入框的显示和“Shift+回车”上屏的字符
      - xform/([a-z][a-z][a-z][a-z])o/$1°/


  # 再次增加快捷键
  __patch: 
    key_binder/bindings/+: 
     # 打字时，' 选中第3个候选字发送 (音码方案需要此键 分词，形码单独启用)
      - { accept: apostrophe, send: 3, when: has_menu} 
      - { when: has_menu, accept: "Control+i", toggle: chaifen }   
      
      # 大写辅助码加到整句第一个音节，例如iuyyfw默认是楚云飞，按下shift+u (iuu yy fw)变成出运费
      #- { when: has_menu, accept: Shift+A, send_sequence: "{Shift+Right}a{Shift+Right}" }
      #- { when: has_menu, accept: Shift+B, send_sequence: "{Shift+Right}b{Shift+Right}" }
      #- { when: has_menu, accept: Shift+C, send_sequence: "{Shift+Right}c{Shift+Right}" }
      #- { when: has_menu, accept: Shift+D, send_sequence: "{Shift+Right}d{Shift+Right}" }
      #- { when: has_menu, accept: Shift+E, send_sequence: "{Shift+Right}e{Shift+Right}" }
      #- { when: has_menu, accept: Shift+F, send_sequence: "{Shift+Right}f{Shift+Right}" }
      #- { when: has_menu, accept: Shift+G, send_sequence: "{Shift+Right}g{Shift+Right}" }
      #- { when: has_menu, accept: Shift+H, send_sequence: "{Shift+Right}h{Shift+Right}" }
      #- { when: has_menu, accept: Shift+I, send_sequence: "{Shift+Right}i{Shift+Right}" }
      #- { when: has_menu, accept: Shift+J, send_sequence: "{Shift+Right}j{Shift+Right}" }
      #- { when: has_menu, accept: Shift+K, send_sequence: "{Shift+Right}k{Shift+Right}" }
      #- { when: has_menu, accept: Shift+L, send_sequence: "{Shift+Right}l{Shift+Right}" }
      #- { when: has_menu, accept: Shift+M, send_sequence: "{Shift+Right}m{Shift+Right}" }
      #- { when: has_menu, accept: Shift+N, send_sequence: "{Shift+Right}n{Shift+Right}" }
      #- { when: has_menu, accept: Shift+O, send_sequence: "{Shift+Right}o{Shift+Right}" }
      #- { when: has_menu, accept: Shift+P, send_sequence: "{Shift+Right}p{Shift+Right}" }
      #- { when: has_menu, accept: Shift+Q, send_sequence: "{Shift+Right}q{Shift+Right}" }
      #- { when: has_menu, accept: Shift+R, send_sequence: "{Shift+Right}r{Shift+Right}" }
      #- { when: has_menu, accept: Shift+S, send_sequence: "{Shift+Right}s{Shift+Right}" }
      #- { when: has_menu, accept: Shift+T, send_sequence: "{Shift+Right}t{Shift+Right}" }
      #- { when: has_menu, accept: Shift+U, send_sequence: "{Shift+Right}u{Shift+Right}" }
      #- { when: has_menu, accept: Shift+V, send_sequence: "{Shift+Right}v{Shift+Right}" }
      #- { when: has_menu, accept: Shift+W, send_sequence: "{Shift+Right}w{Shift+Right}" }
      #- { when: has_menu, accept: Shift+X, send_sequence: "{Shift+Right}x{Shift+Right}" }
      #- { when: has_menu, accept: Shift+Y, send_sequence: "{Shift+Right}y{Shift+Right}" }
      #- { when: has_menu, accept: Shift+Z, send_sequence: "{Shift+Right}z{Shift+Right}" }




##########################################



#配置此项就是选择什么输入法,同时拆分反查和中英文混输也将匹配该输入方案
set_shuru_schema:         
  __include: config_pinyin:/algebra_flypy  #可选解码规则有   algebra_pinyin(全拼), algebra_zrm(自然码), algebra_flypy(小鹤双拼)  选择一个填入
#配置此项就是选择什么辅助码
set_algebra_fuzhu:        
  __include: config_pinyin:/fuzhu_jdh # 可选辅助码有：fuzhu_kong(空 无辅助码)，fuzhu_jdh(简单鹤), fuzhu_zrm(自然码), fuzhu_tiger(虎码), fuzhu_flypy(官鹤音形) 选择一个填入